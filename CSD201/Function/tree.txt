------ INSERTION ------------
   public void insert(Person x) {
        Node p = new Node(x);
        if(isEmpty()) {
            root = p; return;
        }
        //find future father of p called f
        Node f = null, q = root;
        while(q != null) {
            if(q.info.name.equals(x.name)) {
                System.out.println("Insertion failed, duplicated key");
                return;
            }
            if(q.info.name.compareToIgnoreCase(x.name) > 0) {
                f = q;q = q.left;
            }else {
                f = q;q = q.right;
            }
        }
        if(f.info.name.compareToIgnoreCase(x.name) > 0) f.left = p;
        else f.right = p;
    }
   
   void insert(String xName, int xAge)
     {
         Person p = new Person(xName, xAge);
         if(!p.name.startsWith("B")) insert(p);
     }
//    insert age > 4
 if(root == null) return;
        MyQueue m = new MyQueue();
        m.enqueue(root);
        while(!m.isEmpty()) {
            Node q = (Node)m.dequeue();
            if(q.left != null) m.enqueue(q.left);
            if(q.right != null) m.enqueue(q.right);
            if(q.info.age > 4) h.insert(q.info);
        }

----- HEIGHT ----
  int height(Node p) {
      if(p == null) return 0;
      int l = height(p.left) + 1;
      int r = height(p.right) + 1;
      return (l > r) ? l : r;
  }
---- COUNT NODE ------
   public int count() {
        int c = 0;
        Node p = root;
        if(isEmpty()) return c;
        MyQueue m = new MyQueue();
        m.enqueue(p);
        while(!m.isEmpty()) {
            Node q = (Node)m.dequeue();
            if(q.left != null) m.enqueue(q.left);
            if(q.right != null) m.enqueue(q.right);
            c++;
        }
        return c;
    }

------- DELETE BY COPYING --------
    public void deleteByCopy(int x) {
        if(isEmpty()) return;
        Node p = search(x);
        if(p == null) {
            System.out.println("Key does not exists, deletin failed");
            return;
        }
        //find node f where f is father of p
        Node f = null, q = root;
        while(q != p) {
            if(q.info > x) {
                f = q; q = q.left;
            }else {
                f = q; q = q.right;
            }
        }
        //1. p is a leaf (no right and left child)
        if(p.left == null && p.right == null) {
            if(f == null) {//a bst has a node only
                root = null;
            }else if(f.left == p) f.left = null;
            else if(f.right == p) f.right = null;
        }
        //2. p has a left child only
        else if(p.left != null && p.right == null) {
            if(f == null) {//remove root
                root = p.left;
            }else if(f.right == p) f.right = p.left;
            else if(f.left == p) f.left = p.left;
        }
        //3. p has a right child only
        else if(p.right != null && p.left == null) {
            if(f == null) {//remove root
                root = p.right;
            }else if(f.right == p) f.right = p.right;
            else if(f.left == p) f.left = p.right;
        }
        //4. p has both left and right child
        else if(p.left != null && p.right != null) {
            f = null;
            Node rp = p.left;
            while(rp.right != null) {
                f = rp; rp = rp.right;
            }
            p.info = rp.info;
            if(f == null) //rp has no right child
                p.left = rp.left;
            else f.right = rp.left;
        }
    }

---------- DELETE BY MERGE --------------
 public void deleteByMerging(int x) {
        if(isEmpty()) return;
        Node p = search(x);
        if(p == null) {
            System.out.println("Key does not exists, deletin failed");
            return;
        }
        //find node f where f is father of p
        Node f = null, q = root;
        while(q != p) {
            if(q.info > x) {
                f = q; q = q.left;
            }else {
                f = q; q = q.right;
            }
        }
        //1. p is a leaf (no right and left child)
        if(p.left == null && p.right == null) {
            if(f == null) {//a bst has a node only
                root = null;
            }else if(f.left == p) f.left = null;
            else if(f.right == p) f.right = null;
        }
        //2. p has a left child only
        else if(p.left != null && p.right == null) {
            if(f == null) {//remove root
                root = p.left;
            }else if(f.right == p) f.right = p.left;
            else if(f.left == p) f.left = p.left;
        }
        //3. p has a right child only
        else if(p.right != null && p.left == null) {
            if(f == null) {//remove root
                root = p.right;
            }else if(f.right == p) f.right = p.right;
            else if(f.left == p) f.left = p.right;
        }
        //4. p has both left and right child
        else if(p.left != null && p.right != null) {
            //tim node lon nhat ben cay con trai cua p
            q = p.left; Node t = null; 
            //t la ch cua node lon nhat ben con trai
            while(q.right != null){
                t = q; q = q.right;
            }
            Node r = p.right;
            q.right = r;
            if(f == null){
                root = p.left;
            }
            else{
                if(f.left == p) f.left = p.left;
                else f.right = p.left;
            }
        }
    }

    //rotate left
    public Node rotateLeft(Node p) {
        if(p.right == null) return p;
        Node q = p.right;
        p.right = q.left;
        q.left = p;
        return q;
    }

   // Calculate level 
    public void calLevel(Node p) {
      if(p == null) return;
      MyQueue m = new MyQueue();
      m.enqueue(p);
      p.level = 1;
      while(!m.isEmpty()) {
          Node q = (Node)m.dequeue();
          if(q.left != null) {
              q.left.level = q.level + 1;
              m.enqueue(q.left);
          }
          if(q.right != null) {
              q.right.level = q.level +1;
              m.enqueue(q.right);
          }
      }
  }

------ is AVL -------------
  boolean isAVL = true;
        MyQueue q = new MyQueue();
        q.enqueue(root);
        Node r;
        while (!q.isEmpty()) {
            r = q.dequeue();
            r.bal = height(r.right) - height(r.left);
            if (r.bal >= 2 || r.bal <= -2) {
                isAVL = false;
            }
            if (r.left != null) {
                q.enqueue(r.left);
            }
            if (r.right != null) {
                q.enqueue(r.right);
            }
        }

        breadthBal(root, f123);
        if (!isAVL) {
            f123.writeBytes("\r\nThe tree is not an AVL tree\r\n");
        } else {
            f123.writeBytes("\r\nThe tree is an AVL tree\r\n");
        }
------ balance ----------
  //copy all nodes to tree by inorder traversal
    public void buildArray(ArrayList a, Node p) {
        if(p == null) return;
        buildArray(a, p.left);
        a.add(p);
        buildArray(a, p.right);
    }
    
    //balance tree
    public void balance(ArrayList a, int first, int last) {
        if(first > last) return;
        int m = (first + last) / 2;
        int x = ((Node)a.get(m)).info;
        insert(x);
        balance(a, first, m - 1);
        balance(a, m + 1, last);
    }
    public void balance(Node p) {
        ArrayList a = new ArrayList();
        buildArray(a, p);
        int first = 0;
        int last = a.size() - 1;
        BSTree b = new BSTree();
        b.balance(a, first, last);
        root = b.root;
    }